#!/usr/bin/env node
/* eslint-disable no-sync */
// eslint-disable-next-line max-params
(function main(PACKAGE, PROCESS, FS, COMMAND, CHALK, extract_places) {
    COMMAND
        .version(PACKAGE.version, '-v, --version')
        .usage('files')
        .parse(PROCESS.argv)
        .name(PACKAGE.name)
    ;
    write_to_stderr('');
    if (COMMAND.args.length > 0) {
        parse_files(COMMAND.args);
    } else {
        const HOME_DIR = require('os').homedir();
        let file_i = 0;
        let file_name = 'f';
        let full_file_path;
        const default_file_list = [];
        write_info_to_stderr(`üîç  Looking in ${ HOME_DIR }/Downloads for files named f*.txt`); // eslint-disable-line max-len
        while (FS.existsSync(
            full_file_path = `${ HOME_DIR }/Downloads/${ file_name }.txt`,
        )) {
            default_file_list.push(full_file_path);
            file_name = `f (${ ++file_i })`;
        }
        0 === default_file_list.length
            ? write_warning_to_stderr(`ü§∑‚Äç  Could not find any files named f*.txt in ${ HOME_DIR }/Downloads`) // eslint-disable-line max-len
            : write_to_stdout(parse_files(default_file_list))
        ;
    }

    // -----------

    // eslint-disable-next-line max-statements
    function parse_files(raw_file_list) {
        try {
            const safe_file_list = build_safe_file_list(raw_file_list);
            if (0 === safe_file_list.length) {
                write_warning_to_stderr('ü§∑‚Äç  There are no files to parse');
                return 'null';
            }
            const places = extract_places(safe_file_list);
            if (Array.isArray(places)) {
                if (0 === places.length) {
                    write_warning_to_stderr('ü§∑‚Äç  No places were in the files');
                    return '[]';
                }
                write_success_to_stderr('üèÅ  Successfully parsed files');
                return JSON.stringify(places);
            }
        } catch (exception) {
            console.error(exception); // eslint-disable-line no-console
        }
        write_error_to_stderr('üòû  Could not parse the files');
        return 'null';

        // -----------

        function build_safe_file_list(file_list) {
            const safe_file_list = [];
            for (let i = 0, n = file_list.length - 1; i <= n; i++) {
                const raw_file = file_list[i];
                FS.existsSync(raw_file)
                    ? safe_file_list.push(raw_file)
                    : write_warning_to_stderr(`‚ö†Ô∏è  Ignoring ${ raw_file } because it is not a file.`) // eslint-disable-line max-len
                ;
            }
            return safe_file_list;
        }
    }

    // -----------

    function write_to_stdout(text) {
        PROCESS.stdout.write(`${ text }\n`);
    }
    function write_to_stderr(text) {
        PROCESS.stderr.write(`${ text }\n`);
    }
    function write_info_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.cyan(text) }\n`);
    }
    function write_success_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.green(text) }\n`);
    }
    function write_warning_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.yellow(text) }\n`);
    }
    function write_error_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.red(text) }\n`);
    }
}(
    require('../package.json'),
    require('process'),
    require('fs'),
    require('commander'),
    require('chalk'),
    require('../source/index.js'),
));
